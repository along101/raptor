package com.ppdai.raptor.codegen.test.java;

import com.ppdai.raptor.codegen.java.JavaGenerator;
import com.ppdai.raptor.codegen.java.Profile;
import com.ppdai.raptor.codegen.java.ProfileLoader;
import com.ppdai.raptor.codegen.test.AbstractCodegenTest;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import com.squareup.wire.schema.*;
import org.apache.commons.lang3.StringUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;


/**
 * @author zhangchengxi
 * Date 2018/4/26
 */
public class JavaGeneratorTest extends AbstractCodegenTest {


    @After
    public void clean() {

    }

    @Test
    public void testGeneratePOJO() throws IOException {
        JavaGenerator javaGenerator = JavaGenerator.get(schema)
                .withProfile(profile);
        Type type = schema.getType("com.ppdai.raptor.codegen.test.GetRandomStringQuery");
        ClassName javaTypeName = javaGenerator.generatedTypeName(type);
        ProtoFile protoFile = schema.protoFile("com/ppdai/raptor/codegen/test/TestService1.proto");
        TypeSpec typeSpec = javaGenerator.generateType(protoFile, type);
        String cs = typeSpec.toString();

        Assert.assertTrue(StringUtils.isNotBlank(cs));
        System.out.println(cs);

        writeJavaFile(javaTypeName, typeSpec, type.location().withPathOnly());

    }


    @Test
    public void testGenerateInterface() throws IOException {
        JavaGenerator javaGenerator = JavaGenerator.get(schema)
                .withProfile(profile);
        Service service = schema.getService("com.ppdai.raptor.codegen.test.TestService");

        TypeSpec typeSpec = javaGenerator.generateService(schema.protoFile("com/ppdai/raptor/codegen/test/TestService1.proto"), service);
        ClassName typeName = (ClassName) javaGenerator.typeName(service.type());
        System.out.println(typeSpec.toString());

        writeJavaFile(typeName, typeSpec, service.location().withPathOnly());

    }

    @Test
    public void testGenerateAll() throws IOException {
        JavaGenerator javaGenerator = JavaGenerator.get(schema)
                .withProfile(profile);

        for (ProtoFile protoFile : schema.protoFiles()) {
            for (Type type : protoFile.types()) {
                ClassName javaTypeName = javaGenerator.generatedTypeName(type);
                TypeSpec typeSpec = javaGenerator.generateType(protoFile, type);
                writeJavaFile(javaTypeName, typeSpec, type.location().withPathOnly());
            }

            for (Service service : protoFile.services()) {
                TypeSpec typeSpec = javaGenerator.generateService(protoFile, service);
                ClassName typeName = (ClassName) javaGenerator.typeName(service.type());
                writeJavaFile(typeName, typeSpec, service.location().withPathOnly());
            }
        }

    }


    private void writeJavaFile(ClassName javaTypeName, TypeSpec typeSpec, Location location)
            throws IOException {
        JavaFile.Builder builder = JavaFile.builder(javaTypeName.packageName(), typeSpec)
                .addFileComment("$L", "Code generated by Wire protocol buffer compiler, do not edit.");
        if (location != null) {
            builder.addFileComment("\nSource file: $L", location);
        }
        JavaFile javaFile = builder.build();
        try {
            javaFile.writeTo(new File(GENERATED_SOURCE_DIR));
        } catch (IOException e) {
            throw new IOException("Failed to write " + javaFile.packageName + "."
                    + javaFile.typeSpec.name + " to " + GENERATED_SOURCE_DIR, e);
        }
    }

}
