syntax = "proto3";


package com.ppdai.raptor.codegen.test;

import "raptor.proto";

option (appId) = "appId";
option (appName) = "app name";
option (version) = "version.0.1";

service TestService{
    /* asdfghhjk
    @Summary This is summary
     */
    rpc getRandomString (GetRandomStringQuery) returns (RandomStringResponse) {
        option (method) = "get";
        option (path) = "/test";
    }
    rpc SlowResponder (GetRandomStringQuery) returns (RandomStringResponse) {
        option (method) = "get";
        option (path) = "/test/id/name";
        option (pathParam) = "id=int";
        option (pathParam) = "name=string";
        option (requestParam) = "gender=bool";
        option (requestParam) = "age=int";
        option (headerParam) = "header1=int";
        option (headerParam) = "header2=int";
        option (headerParam) = "x-xx-xxx";
    }
    rpc SetHealthCheckStatus (SetHealthCheckStatusCommand) returns (SetHealthCheckStatusResponse) {
        option (path) = "/test/name/gender";
    }
    rpc CallsAnotherService (CallAnotherServiceCommand) returns (CallAnotherServiceResponse) {}
}

/* test message document */
message GetRandomStringQuery {
    repeated string input = 1;
    map<int32,int32> amap = 2;

    oneof oneof_test {
        int32 id = 3;
        string name = 4;
    }

    RandomStringResponse r = 5;
    TestEnum te = 6;

}

enum TestEnum{
    A = 0;
    B = 1;
}

message RandomStringResponse {
    string random = 1;
}

message SetHealthCheckStatusCommand {
    string status = 1;
    string message = 2;
}

message SetHealthCheckStatusResponse {
}

message RandomSampleEvent {
    Meta meta = 1;
    string id = 2;
    string message = 3;
}

message HandlerSuccessEvent {
    Meta meta = 1;
    string id = 2;
    string message = 3;
}

message Meta {
    string name = 1;
}

message CallAnotherServiceCommand {
}

message CallAnotherServiceResponse {
}
